{"ast":null,"code":"// server.js\n\nconst express = require('express');\nconst multer = require('multer');\nconst {\n  createWorker\n} = require('tesseract.js');\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Multer middleware for handling file uploads\nconst upload = multer({\n  dest: 'uploads/'\n});\n\n// Serve static files from the 'uploads' directory\napp.use(express.static('uploads'));\n\n// OCR worker\nconst worker = createWorker();\n\n// Initialize the Tesseract.js worker\n(async () => {\n  await worker.load();\n  await worker.loadLanguage('eng');\n  await worker.initialize('eng');\n})();\n\n// POST endpoint for handling file uploads and performing OCR\napp.post('/upload', upload.single('image'), async (req, res) => {\n  try {\n    // Perform OCR on the uploaded image\n    const {\n      data: {\n        text\n      }\n    } = await worker.recognize(req.file.path);\n    console.log('Extracted Text:', text);\n\n    // Send the extracted text back to the client\n    res.json({\n      text\n    });\n  } catch (error) {\n    console.error('Error performing OCR:', error);\n    res.status(500).json({\n      error: 'Error performing OCR'\n    });\n  }\n});\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","multer","createWorker","app","PORT","process","env","upload","dest","use","static","worker","load","loadLanguage","initialize","post","single","req","res","data","text","recognize","file","path","console","log","json","error","status","listen"],"sources":["C:/Users/ideapad GAMING/Desktop/SDGP(Project)/src/views/server.js"],"sourcesContent":["// server.js\r\n\r\nconst express = require('express');\r\nconst multer = require('multer');\r\nconst { createWorker } = require('tesseract.js');\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 5000;\r\n\r\n// Multer middleware for handling file uploads\r\nconst upload = multer({ dest: 'uploads/' });\r\n\r\n// Serve static files from the 'uploads' directory\r\napp.use(express.static('uploads'));\r\n\r\n// OCR worker\r\nconst worker = createWorker();\r\n\r\n// Initialize the Tesseract.js worker\r\n(async () => {\r\n  await worker.load();\r\n  await worker.loadLanguage('eng');\r\n  await worker.initialize('eng');\r\n})();\r\n\r\n// POST endpoint for handling file uploads and performing OCR\r\napp.post('/upload', upload.single('image'), async (req, res) => {\r\n  try {\r\n    // Perform OCR on the uploaded image\r\n    const { data: { text } } = await worker.recognize(req.file.path);\r\n    console.log('Extracted Text:', text);\r\n\r\n    // Send the extracted text back to the client\r\n    res.json({ text });\r\n  } catch (error) {\r\n    console.error('Error performing OCR:', error);\r\n    res.status(500).json({ error: 'Error performing OCR' });\r\n  }\r\n});\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on port ${PORT}`);\r\n});\r\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAM;EAAEE;AAAa,CAAC,GAAGF,OAAO,CAAC,cAAc,CAAC;AAEhD,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;;AAErC;AACA,MAAMG,MAAM,GAAGN,MAAM,CAAC;EAAEO,IAAI,EAAE;AAAW,CAAC,CAAC;;AAE3C;AACAL,GAAG,CAACM,GAAG,CAACV,OAAO,CAACW,MAAM,CAAC,SAAS,CAAC,CAAC;;AAElC;AACA,MAAMC,MAAM,GAAGT,YAAY,CAAC,CAAC;;AAE7B;AACA,CAAC,YAAY;EACX,MAAMS,MAAM,CAACC,IAAI,CAAC,CAAC;EACnB,MAAMD,MAAM,CAACE,YAAY,CAAC,KAAK,CAAC;EAChC,MAAMF,MAAM,CAACG,UAAU,CAAC,KAAK,CAAC;AAChC,CAAC,EAAE,CAAC;;AAEJ;AACAX,GAAG,CAACY,IAAI,CAAC,SAAS,EAAER,MAAM,CAACS,MAAM,CAAC,OAAO,CAAC,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC9D,IAAI;IACF;IACA,MAAM;MAAEC,IAAI,EAAE;QAAEC;MAAK;IAAE,CAAC,GAAG,MAAMT,MAAM,CAACU,SAAS,CAACJ,GAAG,CAACK,IAAI,CAACC,IAAI,CAAC;IAChEC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEL,IAAI,CAAC;;IAEpC;IACAF,GAAG,CAACQ,IAAI,CAAC;MAAEN;IAAK,CAAC,CAAC;EACpB,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7CT,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAuB,CAAC,CAAC;EACzD;AACF,CAAC,CAAC;AAEFxB,GAAG,CAAC0B,MAAM,CAACzB,IAAI,EAAE,MAAM;EACrBoB,OAAO,CAACC,GAAG,CAAE,6BAA4BrB,IAAK,EAAC,CAAC;AAClD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}