{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ideapad GAMING\\\\Desktop\\\\SDGP(Project)\\\\src\\\\views\\\\ImageUploadOCR.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './ImageUploadOCR.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageUploadOCR() {\n  _s();\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [ocrText, setOcrText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [tesseractWorker, setTesseractWorker] = useState(null);\n  useEffect(() => {\n    const initTesseract = async () => {\n      const worker = Tesseract.createWorker({\n        lang: 'eng+engc' // Change to your desired language code for cursive handwriting\n      });\n      try {\n        await worker.load();\n        await worker.loadLanguage('eng+engc');\n        await worker.initialize('eng+engc');\n        setTesseractWorker(worker);\n      } catch (err) {\n        console.error('Tesseract initialization error:', err);\n        setError('Failed to initialize Tesseract');\n      }\n    };\n    initTesseract();\n    return () => {\n      if (tesseractWorker) {\n        tesseractWorker.terminate();\n      }\n    };\n  }, []);\n  const handleImageChange = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    setSelectedImage(file);\n    setOcrText(''); // Clear previous OCR text\n    setError(null); // Clear previous error\n  };\n  const handleOcr = async () => {\n    if (!selectedImage) {\n      setError('Please select an image to perform OCR');\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      const {\n        data: {\n          text\n        }\n      } = await Tesseract.recognize(selectedImage, 'eng+engc');\n      setOcrText(text);\n    } catch (err) {\n      console.error('OCR error:', err);\n      setError('OCR processing failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        id: \"fileInput\",\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fileInput\",\n        children: \"Choose Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), selectedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-preview\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: URL.createObjectURL(selectedImage),\n        alt: \"Selected Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleOcr,\n        disabled: isLoading,\n        children: isLoading ? 'Extracting Text...' : 'Extract Text from Image'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), ocrText && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Extracted Text: \", ocrText]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageUploadOCR, \"ScwWjoPr+sR74pW9LGUTrdqc9Mo=\");\n_c = ImageUploadOCR;\nexport default ImageUploadOCR;\nvar _c;\n$RefreshReg$(_c, \"ImageUploadOCR\");","map":{"version":3,"names":["React","useState","useEffect","Tesseract","jsxDEV","_jsxDEV","ImageUploadOCR","_s","selectedImage","setSelectedImage","ocrText","setOcrText","isLoading","setIsLoading","error","setError","tesseractWorker","setTesseractWorker","initTesseract","worker","createWorker","lang","load","loadLanguage","initialize","err","console","terminate","handleImageChange","event","file","target","files","handleOcr","data","text","recognize","className","children","type","accept","id","onChange","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","src","URL","createObjectURL","alt","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ideapad GAMING/Desktop/SDGP(Project)/src/views/ImageUploadOCR.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Tesseract from 'tesseract.js';\r\nimport './ImageUploadOCR.css'; // Import the CSS file\r\n\r\nfunction ImageUploadOCR() {\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [ocrText, setOcrText] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [tesseractWorker, setTesseractWorker] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const initTesseract = async () => {\r\n      const worker = Tesseract.createWorker({\r\n        lang: 'eng+engc', // Change to your desired language code for cursive handwriting\r\n      });\r\n\r\n      try {\r\n        await worker.load();\r\n        await worker.loadLanguage('eng+engc');\r\n        await worker.initialize('eng+engc');\r\n        setTesseractWorker(worker);\r\n      } catch (err) {\r\n        console.error('Tesseract initialization error:', err);\r\n        setError('Failed to initialize Tesseract');\r\n      }\r\n    };\r\n\r\n    initTesseract();\r\n\r\n    return () => {\r\n      if (tesseractWorker) {\r\n        tesseractWorker.terminate();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleImageChange = (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n\r\n    setSelectedImage(file);\r\n    setOcrText(''); // Clear previous OCR text\r\n    setError(null); // Clear previous error\r\n  };\r\n\r\n  const handleOcr = async () => {\r\n    if (!selectedImage) {\r\n      setError('Please select an image to perform OCR');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const { data: { text } } = await Tesseract.recognize(selectedImage, 'eng+engc');\r\n      setOcrText(text);\r\n    } catch (err) {\r\n      console.error('OCR error:', err);\r\n      setError('OCR processing failed');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"input-container\">\r\n        <input type=\"file\" accept=\"image/*\" id=\"fileInput\" onChange={handleImageChange} />\r\n        <label htmlFor=\"fileInput\">Choose Image</label>\r\n      </div>\r\n      {selectedImage && (\r\n        <div className=\"image-preview\">\r\n          <img src={URL.createObjectURL(selectedImage)} alt=\"Selected Image\" />\r\n        </div>\r\n      )}\r\n      <div className=\"button-container\">\r\n        <button onClick={handleOcr} disabled={isLoading}>\r\n          {isLoading ? 'Extracting Text...' : 'Extract Text from Image'}\r\n        </button>\r\n      </div>\r\n      {ocrText && <p>Extracted Text: {ocrText}</p>}\r\n      {error && <p className=\"error-message\">{error}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageUploadOCR;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}