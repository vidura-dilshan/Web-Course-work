{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ideapad GAMING\\\\Desktop\\\\SDGP(Project)\\\\src\\\\views\\\\UploadPrescription.js\",\n  _s = $RefreshSig$();\n// UploadPrescription.js\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport './UploadPrescription.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadPrescription = () => {\n  _s();\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [ocrText, setOcrText] = useState('');\n  const inputRef = useRef(null);\n  const handleImageChange = event => {\n    if (event.target.files && event.target.files[0]) {\n      setSelectedImage(event.target.files[0]);\n    }\n  };\n  const handleUpload = async () => {\n    const formData = new FormData();\n    formData.append('image', selectedImage);\n    try {\n      const response = await axios.post('http://localhost:5000/', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const {\n        data\n      } = response;\n      setOcrText(data.text); // Assuming your OCR endpoint returns extracted text\n    } catch (error) {\n      console.error('Error uploading image:', error);\n      // Handle errors appropriately (e.g., display error message to user)\n    }\n  };\n  const handleClear = () => {\n    setSelectedImage(null);\n    setOcrText('');\n    inputRef.current.value = null; // Clear file input\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload Prescription\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      ref: inputRef,\n      onChange: handleImageChange,\n      accept: \"image/*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), selectedImage && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: URL.createObjectURL(selectedImage),\n      alt: \"Selected Prescription\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"upload-btn\",\n      onClick: handleUpload,\n      disabled: !selectedImage,\n      children: \"Upload and Extract Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"clear-btn\",\n      onClick: handleClear,\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"ocr-text\",\n      children: ocrText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadPrescription, \"yc/MlgyZtfmn4W307XeqT6rUTYM=\");\n_c = UploadPrescription;\nexport default UploadPrescription;\nvar _c;\n$RefreshReg$(_c, \"UploadPrescription\");","map":{"version":3,"names":["React","useState","useRef","axios","jsxDEV","_jsxDEV","UploadPrescription","_s","selectedImage","setSelectedImage","ocrText","setOcrText","inputRef","handleImageChange","event","target","files","handleUpload","formData","FormData","append","response","post","headers","data","text","error","console","handleClear","current","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","ref","onChange","accept","src","URL","createObjectURL","alt","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ideapad GAMING/Desktop/SDGP(Project)/src/views/UploadPrescription.js"],"sourcesContent":["// UploadPrescription.js\r\nimport React, { useState, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport './UploadPrescription.css';\r\n\r\nconst UploadPrescription = () => {\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [ocrText, setOcrText] = useState('');\r\n  const inputRef = useRef(null);\r\n\r\n  const handleImageChange = (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      setSelectedImage(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    const formData = new FormData();\r\n    formData.append('image', selectedImage);\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      });\r\n      const { data } = response;\r\n      setOcrText(data.text); // Assuming your OCR endpoint returns extracted text\r\n    } catch (error) {\r\n      console.error('Error uploading image:', error);\r\n      // Handle errors appropriately (e.g., display error message to user)\r\n    }\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setSelectedImage(null);\r\n    setOcrText('');\r\n    inputRef.current.value = null; // Clear file input\r\n  };\r\n\r\n  return (\r\n    <div className=\"upload-container\">\r\n      <h2>Upload Prescription</h2>\r\n      <input type=\"file\" ref={inputRef} onChange={handleImageChange} accept=\"image/*\" />\r\n      {selectedImage && <img src={URL.createObjectURL(selectedImage)} alt=\"Selected Prescription\" />}\r\n      <button className=\"upload-btn\" onClick={handleUpload} disabled={!selectedImage}>Upload and Extract Text</button>\r\n      <button className=\"clear-btn\" onClick={handleClear}>Clear</button>\r\n      <p className=\"ocr-text\">{ocrText}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadPrescription;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}